#log properties
logging:
  level:
    org:
      springframework: ${LOG:INFO}
      #security: ${SEC_LOG:INFO}
    es:
      once:
        newsop: ${ASP_LOG:DEBUG}
logging.level.org.springframework.security: ${SEC_LOG:DEBUG}
logger:
   org.hibernate.SQL: ${HIB_LOG:INFO}
#Apic doc properties
springdoc:
  show-actuator: true
  swagger-ui:
    path: /swagger-ui # swagger custom path
    enabled: true  # Disabling the swagger-ui production enviroments always false
    use-root-path: true
    groups-order: DESC
    disable-swagger-default-url: true
  #packagesToScan: com.archetype.app.infrastructure.in.rest, com.archetype.app.domain
  #pathsToMatch: /v1/prototype/** , /actuator/** #creates groups before
#Database properties
spring:
   jpa:
     defer-datasource-initialization: true
     show-sql: true
     hibernate:
        ddl-auto: ${DATASOURCE_DDL_AUTO:none}
     properties:
        hibernate:
           dialect: ${DATASOURCE_DIALECT:org.hibernate.dialect.H2Dialect}
   datasource:
    driverClassName: ${DATASOURCE_DRIVER:org.h2.Driver}
    url: ${DATASOURCE_URL:jdbc:h2:mem:test_db;MODE=ORACLE;DB_CLOSE_DELAY=-1}
    username: ${DATASOURCE_USERNAME:sa}
    password: ${DATASOURCE_PASSWORD:password}
    entity-package: com.archetype.app.infrastructure.out.db.jpa.entity
    repository-package: com.archetype.app.infrastructure.out.db.jpa.repository
   #datasource-secondary:
    #driverClassName: ${DATASOURCE_DRIVER_2:org.h2.Driver}
    #url:  ${DATASOURCE_URL_2:jdbc:h2:mem:test_db;MODE=ORACLE;DB_CLOSE_DELAY=-1}
    #username: ${DATASOURCE_USERNAME_2:sa}
    #password: ${DATASOURCE_PASSWORD_2:password}
    #dialect: ${DATASOURCE_DIALECT_2:org.hibernate.dialect.H2Dialect}
    #ddl-auto: ${DATASOURCE_DDL_AUTO_2:none}
   sql:
    init:
      mode: always
      continue-on-error: true
      #data-locations: classpath:db/data.sql
#Spring Boot 3.1 upgrades to Hibernate 6.2, so upgrading SB to 3.1.x fixes strategy = GenerationType.AUTO
   #jpa:
    #properties:
      #hibernate.query.mutation_strategy: org.hibernate.query.sqm.mutation.internal.inline.InlineMutationStrategy
      #hibernate.query.mutation_strategy.global_temporary.create_tables: false
      #hibernate.query.mutation_strategy.global_temporary.drop_tables: false
   kafka:
     producer:
       bootstrap-servers: localhost:9092
       key-serializer: org.apache.kafka.common.serialization.StringSerializer
       value-serializer: org.apache.kafka.common.serialization.StringSerializer
       #value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
       retries: 0 ##numero de reintentos
       #acks: 1 # esto indica que vamos a realizar acuse de recibo en al menos 1 nodo, poner un 0 es que da igual, all inidca que todos los nodos deben mandar el acknolege, si es transicional debe ser al junto con 
       #transaction-id-prefix: prototype-produccer-id #necesario para identificar la transaccion
       #batch-size: 16384 # ms Performance tamaño de ventana  default value
       #buffer-memory: 33554432 #Long PErformance tamaño de buffer de memoria para lanzaar bach
       #properties:
         #max-in-flight-requests-per-connection: 5 #valor por defecto kafka
         #linger-ms: 0 #tiempo de lanzamiento de bach, 0 continuamente, este valor hay que ajustarlo, a 2,4, 6, ettc y con envio de 5 millones de mensajes
     consumer:
       bootstrap-servers: localhost:9092
       group-id: prototypeConsumer
       auto-offset-reset: earliest
       key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
       value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
       enable-auto-commit: true #activa commit de los mensajes automatico
       auto-commit-interval: 100 #ms
       properties:
          session-timeout-ms: 15000
          spring:
             json:
              trusted:
                packages: '*'       
     template:
        default-topic: "prototype4j-topic" 
        observation-enabled: true
